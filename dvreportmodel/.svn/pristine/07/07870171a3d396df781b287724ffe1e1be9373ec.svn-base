package com.ibm.csi.npm.dvreportmodel.main;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.net.URLDecoder;
import java.util.HashMap;
import java.util.Iterator;

import org.apache.commons.collections.set.MapBackedSet;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.stream.JsonReader;

public class PropertiesBuilder {
	public static String propertiesOutputFolderPath = "resources/properties/output";
	public static String propertiesReferanceFilePath = "resources/properties/referance";
	public static String propertiesReferanceFileName = "DVAppPacksBundle.properties";
	public static String propertiesOutputFileName;
	public static String systemLang=null;
	public static String lang_case=null;
	private static final Logger logger = LogManager.getLogger(DashboardBuilder.class);
	//public static MapBackedSet <String,String> allProperties
	public static HashMap<String, String> allProperties = new HashMap<String, String>();
	
	
	public static void readProperties() {
		
		System.out.println("===============================================");
		System.out.println("======= Adding all properties to Memory =======");
		System.out.println("===============================================");
		
		logger.info("===============================================");
		logger.info("======= Adding all properties to Memory =======");
		logger.info("===============================================");
		
		if(propertiesReferanceFilePath.length()!=0) {
			if((propertiesReferanceFilePath.charAt((propertiesReferanceFilePath.length())-1))!='/') {
				 //System.out.println("Appending /"); 
				 propertiesReferanceFilePath = propertiesReferanceFilePath+"/";
			 }
		}
		 
		
		final String FILENAME = propertiesReferanceFilePath + propertiesReferanceFileName;
		BufferedReader br=null;
		
		try{
			br = new BufferedReader(new FileReader(FILENAME));
			String currentLine;

			while ((currentLine = br.readLine()) != null) {
				if (currentLine.contains("#")) {
					logger.warn("Ignoring Line " + currentLine);
				}else {
					if (currentLine.contains("=")) {
						String[] temp = currentLine.split("=", 2); 
						allProperties.put(temp[0], temp[1]);
						
						logger.info("Added identifed property " + temp[0] + "with value " + temp[1]);
					}
				}
				
				
			}
		}catch (Exception e) {
			// TODO: handle exception
		}finally {
			try {
				
				if (br!=null) {
					br.close();
					}
				} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		System.out.println("==================Run Summary==================");
		System.out.println("Added " + allProperties.size() + " properties in Memory");
		System.out.println("==================-----------==================");
		logger.info("==================Run Summary==================");
		logger.info("Added " + allProperties.size() + " properties in Memory");
		logger.info("==================-----------==================");
		
	}
	
	public static void buildProperties() {
		
				
		File dashBoardOutputDirectory = new File( com.ibm.csi.npm.dvreportmodel.main.DashboardBuilder.camelOutputFolderPath + "/final" );

		System.out.println("==============================================");
		System.out.println("== Building properties files for Dashboards ==");
		System.out.println("==============================================");
		
		logger.info("==============================================");
		logger.info("== Building properties files for Dashboards ==");
		logger.info("==============================================");
		
		if(propertiesOutputFolderPath.length()!=0) {
			if((propertiesOutputFolderPath.charAt((propertiesOutputFolderPath.length())-1))!='/') { 
				 propertiesOutputFolderPath = propertiesOutputFolderPath+"/";
				 System.out.println("Reading JSONs form " + propertiesOutputFolderPath);
				 
			 }
		}
		
		FilenameFilter fileNameFilter = new FilenameFilter() {
			@Override
			public boolean accept(File dir, String name) {
				if (name.lastIndexOf('.') > 0) {
					// get last index for '.' char
					int lastIndex = name.lastIndexOf('.');

					// get extension
					String str = name.substring(lastIndex);

					// match path name extension
					if (str.equals(".json")) {
						return true;
					}
				}
				return false;
			}
		};
		File[] fileList = null;
		
		if (dashBoardOutputDirectory.exists()) {
			fileList = dashBoardOutputDirectory.listFiles(fileNameFilter);
		}
		
		if (fileList != null && fileList.length > 0) {
			for (File f : fileList) {
				try {

					JsonParser parser = new JsonParser();
					JsonReader jr = new JsonReader(new FileReader(f));
					// jr.setLenient(true);
					JsonObject jsonObject = (JsonObject) parser.parse(jr);
					
					String dashBoardID = (f.getName()).replaceAll(".json", "");
					
					System.out.println("File name: " + dashBoardID);		
					
					
					String usedProperties="#Property file generated by Migration tool.\n";
							
					File file = new File(propertiesOutputFolderPath + dashBoardID + "_"
							+ lang_case + ".properties");
					FileWriter fileWriter = new FileWriter(file);
					
					String contain = URLDecoder.decode(jsonObject.toString());
					if (contain.contains("$localization")) {
						/*
						String temp[] = contain.split("$local");
						
						for (String tmp : temp) {
							if(tmp.contains("localization")) {
								
								int endIndex=tmp.indexOf('"');
							}
						}*/
						
						for (String key : allProperties.keySet()) {
							if (contain.contains("$localization."+key)) {
								usedProperties=usedProperties+key+"="+allProperties.get(key)+"\n";
								
							}
							
						} 
						
						
					}
							
						
					fileWriter.write(usedProperties);
					fileWriter.flush();
					fileWriter.close();
					
					System.out.println("=======================");
					System.out.println("New properties file "+ file.getName() +" generated for dashboard id: " + dashBoardID);
					System.out.println("=======================");
					logger.info("=======================");
					logger.info("New properties file "+ file.getName() +" generated for dashboard id: " + dashBoardID);
					logger.info("=======================");
					
				} catch (Exception e) {
					System.out.println("Exception while file creation");
					e.printStackTrace();
					logger.error("Exception while file creation",e);
				}
			}
		}
		
	}
	
	public static void PropertiesBuilder() {
		
		
		//get system language
		systemLang = java.util.Locale.getDefault().toString();
		
		//if no set English & print log 
		if(systemLang.equals(null)) {
			System.out.println("System Language not detected.Using English");
			logger.info("System Language not detected.Using English");
			systemLang = "en";
		}
		else {
			System.out.println("System Language detected as "+ com.ibm.csi.npm.dvreportmodel.main.PropertiesBuilder.systemLang);
			logger.info("System Language detected as "+ com.ibm.csi.npm.dvreportmodel.main.PropertiesBuilder.systemLang);
		}
		
		systemLang=systemLang.toLowerCase();
		
		System.out.println(systemLang);
		
		//set Switch Case Variable
		if(systemLang.contains("en")) {
			lang_case="en";
		}else if (systemLang.contains("fr")) {
			lang_case="fr";	
		}else if (systemLang.contains("de")) {
			lang_case="de";	
		}else if (systemLang.contains("es")) {
			lang_case="es";	
		}
		
		switch(lang_case) {
		
		case "en":			//English
			propertiesReferanceFileName = "DVAppPacksBundle.properties";
			readProperties();
			buildProperties();
		break;	
			
		case "es":			//
			propertiesReferanceFileName = "DVAppPacksBundle_es.properties";
			readProperties();
			buildProperties();
		break;	
			
		case "fr":			//
			propertiesReferanceFileName = "DVAppPacksBundle_fr.properties";
			readProperties();
			buildProperties();
		break;	
			
		case "de":			//
			propertiesReferanceFileName = "DVAppPacksBundle_de.properties";
			readProperties();
			buildProperties();
		break;	
			
		default:			//English as default
			propertiesReferanceFileName = "DVAppPacksBundle.properties";
			readProperties();
			buildProperties();
		} 
	}
	
}
