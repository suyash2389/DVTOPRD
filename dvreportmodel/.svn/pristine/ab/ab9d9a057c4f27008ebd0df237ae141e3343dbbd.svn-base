package com.ibm.csi.npm.dvreportmodel.main;

import java.io.File;
import java.io.FileWriter;
import java.io.FilenameFilter;

/*
 * ====================================================================
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 *
 */


import java.io.IOException;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.concurrent.CountDownLatch;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;

import org.apache.camel.CamelContext;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.converter.jaxb.JaxbDataFormat;
import org.apache.camel.impl.DefaultCamelContext;
import org.apache.camel.model.dataformat.JsonLibrary;
import org.apache.camel.spi.DataFormat;
import org.apache.http.HttpHost;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.AuthCache;
import org.apache.http.client.CredentialsProvider;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.protocol.HttpClientContext;
import org.apache.http.impl.auth.BasicScheme;
import org.apache.http.impl.client.BasicAuthCache;
import org.apache.http.impl.client.BasicCredentialsProvider;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.ibm.csi.npm.dashjson.DashboardType;
import com.ibm.csi.npm.dashjson.StoreType;
import com.ibm.csi.npm.dashjson.WidgetType;

import net.sf.json.JSONArray;
import net.sf.json.JSONException;
import net.sf.json.JSONObject;
import net.sf.json.util.JSONTokener;


/**
 * An example of HttpClient can be customized to authenticate
 * preemptively using BASIC scheme.
 * <b>
 * Generally, preemptive authentication can be considered less
 * secure than a response to an authentication challenge
 * and therefore discouraged.
 */
public class GrafanaReportCollector {
	private static final Logger logger = LogManager.getLogger(DashboardBuilder.class);
	public static HashMap<String, JsonObject> reportConfs = new HashMap<String, JsonObject>();
	public static HashMap<String, DashboardType> dashboards = new HashMap<String,DashboardType>();
	public static HashMap<String, JsonObject> prdDashboards = new HashMap<String, JsonObject>();
	public static String reportID = "";
	
	public static void main(String[] args) throws IOException  {
    	ArrayList<String> reportIds= new ArrayList<String>(); 	
        HttpHost target = new HttpHost("10.222.50.32", 3000, "http");
        CredentialsProvider credsProvider = new BasicCredentialsProvider();
        credsProvider.setCredentials(
                new AuthScope(target.getHostName(), target.getPort()),
                new UsernamePasswordCredentials("admin", "admin"));
        CloseableHttpClient httpclient = HttpClients.custom()
                .setDefaultCredentialsProvider(credsProvider).build();
        JsonParser parser = new JsonParser(); 
        try {

            // Create AuthCache instance
            AuthCache authCache = new BasicAuthCache();
            // Generate BASIC scheme object and add it to the local
            // auth cache
            BasicScheme basicAuth = new BasicScheme();
            authCache.put(target, basicAuth);

            // Add AuthCache to the execution context
            HttpClientContext localContext = HttpClientContext.create();
            localContext.setAuthCache(authCache);
            
          //fetch Report UIDs
            
            HttpGet httpget = new HttpGet("http://10.222.50.32:3000/api/search/");

            System.out.println("Executing request " + httpget.getRequestLine() + " to target " + target);
         
                CloseableHttpResponse response = httpclient.execute(target, httpget, localContext);
                try {
                    
	                   // System.out.println(response.getStatusLine());
	                   String tempResponse = EntityUtils.toString(response.getEntity());
	                   JsonArray allReports = (JsonArray) parser.parse(tempResponse);
	
	                   //Read more: http://www.java67.com/2016/10/3-ways-to-convert-string-to-json-object-in-java.html#ixzz5DVEON3Lf
	                   
	                   System.out.println("all Reports array: ");
	                   
	                   System.out.println(allReports.toString());
	                   
	                   System.out.println("all Reports count: " + allReports.size());
	                   
	                   for (JsonElement jsonElement : allReports) {
	                	   System.out.println("Report json details :" + jsonElement.toString());
	                	   JsonObject tempObject = (JsonObject) jsonElement;
	                	   JsonElement tempElement = tempObject.get("uid");
	                	   String uid = tempElement.getAsString();
	                	   if (reportID.equals("")) {
	                		   reportIds.add(uid);
	                		   System.out.println("Added " + uid);
						}else {
							if (reportID.contains(uid)){
								reportIds.add(uid);
								System.out.println("Added " + uid);
							}else {
								System.out.println("Ignoring " + uid);
							}
						}
	                	   
	                	   
	                   }
	                   
	                   System.out.println("All Available Report IDs : \n" + reportIds.toString());
	                   
		            }
                catch (NullPointerException e) {
                	System.out.println("Ex = " + e.toString());
				}
                catch(Exception e) {
                	System.out.println("Ex = " + e.toString());
                }
                finally {
                    response.close();
                }
                
                
                for (String uid : reportIds) {
                	try {
                		//fetch Report Config
                		httpget = new HttpGet("http://10.222.50.32:3000/api/dashboards/uid/"+uid);
                		response = httpclient.execute(target, httpget, localContext);
                        
	                      String tempResponse = EntityUtils.toString(response.getEntity());
	 	                  JsonObject reportConfig= (JsonObject) parser.parse(tempResponse);
	 	                   
	 	                  System.out.println("Data on uid : "+ uid +"\n" + reportConfig.toString());
	 	                   
	 	                  JsonElement tempElement = reportConfig.get("dashboard");
	                       
	 	                  reportConfig = (JsonObject) tempElement;
	 	                  System.out.println("Dashboard on uid : "+ uid +"\n" + reportConfig.toString());
	 	                  
	 	                  reportConfs.put(uid,reportConfig);
 	                   
    				} catch (Exception e) {
    					System.out.println("Ex = " + e.toString());
    				}finally {
                        response.close();
                    }	
				}
                
                System.out.println("All Dashboard confs : \n" + reportConfs.toString());
        
        } finally {
            httpclient.close();
        }
        
        
        //Extract required information
        
        for (String key : reportConfs.keySet()) {
			
        	DashboardType tempDash = new DashboardType();
        	JsonObject tempReport = reportConfs.get(key);
        	JsonArray tempPanels = tempReport.getAsJsonArray("panels");
        	System.out.print("Working on Dashboard ");
        	
        	
        	//id
        	tempDash.setId((String) (tempReport.get("uid")).getAsString());
        	System.out.print("with Id:" + tempDash.getId());
        	
        	//title
        	tempDash.setTitle((String) (tempReport.get("title")).getAsString());
        	System.out.print(" & Title: \"" + tempDash.getTitle() + "\"");
        	
        	
        	//description
        	tempDash.setDescription("Report generated by Grafana to PRD Migration Tool");
        	
        	//store
        	try {
				
			
        	ArrayList<StoreType> tempStores = buildStoresFromPanels(key,tempPanels); 
        	for (StoreType e : tempStores) {
        		tempDash.getStores().add(e);
			}
        	
        	//filter
        	//to be planned
        	
        	//widgets
        	ArrayList<WidgetType> tempWidgets = buildWidgetsFromPanels(key,tempPanels); 
        	for (WidgetType e : tempWidgets) {
        		tempDash.getWidgets().add(e);
			}
        	        	
        	//blockHeight
        	//kept default to 35
        	tempDash.setBlockHeight("35");
        	
        	//bootstrapCols
        	//kept default to 60
        	tempDash.setBootstrapCols("60");
        	
        	//totalRows
        	//to be calculated
        	
        	//totalCols
        	//to be calculated
        	
        	//localized
        	tempDash.setLocalized("false"); 
        	
        	//Add temp object in ArrayList
        	
        	dashboards.put(key, tempDash);
        	
        	System.out.println("\n Dashboard extracted Succesfully");
        	
        	} catch (Exception e) {
				System.out.println("\n Failed with error:" + e.toString());
				
			}
		}
        
       
      //Generate PRD JSON Object xml File
        
       for (String key : dashboards.keySet()) {
			
        	DashboardType dashboard = dashboards.get(key);
        	System.out.println("Dasboard : \n" + dashboard);
        	//System.out.println("Dasboard : \n" + (objectToJSONObject(dashboard)).toString());
        	
        	generatePRDxmlFile(dashboard);
		}
        
        

        // Build JSON File from xml      
       		buildJSONfromXml();
       
        
        
       /* for (String key : prdDashboards.keySet()) {
			try {
				File file = new File(
		        		com.ibm.csi.npm.dvreportmodel.main.DashboardBuilder.camelOutputFolderPath + "/final/"
						+ key + ".json");
				FileWriter fileWriter = new FileWriter(file);
				fileWriter.write(prdDashboards.get(key).toString());
				fileWriter.flush();
				fileWriter.close();
				System.out.println(com.ibm.csi.npm.dvreportmodel.main.DashboardBuilder.camelOutputFolderPath + "/final/"
						+ key + ".json created");
			} catch (Exception e) {
				// TODO: handle exception
			}
		}*/
       		
       		
       		//	Perform JSON Correctoion
       		com.ibm.csi.npm.dvreportmodel.main.DashboardBuilder.performJsonCorrection();
			
        
        System.out.println("====== End of Execution ======");
    }
	
	
	//generatePRDjsonFile - start
	private static void generatePRDxmlFile(DashboardType dashboard) {
		try {
			String fileName = dashboard.getId()+ ".xml";
			File file = new File( com.ibm.csi.npm.dvreportmodel.main.DashboardBuilder.camelOutputFolderPath + fileName);
			if (file.exists()) {
				file = new File( com.ibm.csi.npm.dvreportmodel.main.DashboardBuilder.camelOutputFolderPath
						+ dashboard.getTitle().replaceAll(" ", "_")
								.replaceAll("/", "_").replace("\\", "_") + "_"
						+ dashboard.getId() + ".xml");
			}
			
			JAXBContext jaxbContext = JAXBContext.newInstance(DashboardType.class);
			Marshaller jaxbMarshaller = jaxbContext.createMarshaller();

			  // Set the Marshaller media type to JSON or XML
			
			//jaxbMarshaller.setProperty(MarshallerProperties.MEDIA_TYPE,"application/json");
			
			// Set it to true if you need to include the JSON root element in the JSON output
			
			//jaxbMarshaller.setProperty(MarshallerProperties.JSON_INCLUDE_ROOT, true);
			
			// Set it to true if you need the JSON output to formatted
			jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);

			// Marshal the employee object to JSON and print the output to console
			jaxbMarshaller.marshal(dashboard, file);
			//jaxbMarshaller.marshal(dashboard, System.out);
			
			System.out.println("=======================");
			System.out.println("New file "+ file.getAbsolutePath() +" created ");
			System.out.println("=======================");
			
		} catch (JAXBException e) {
			System.out.println(
					"Exception while marshaling reporter \"" + dashboard.getTitle()
							+ "\" (" + dashboard.getId() + ")" + e.toString());
		}

	}
	//generatePRDjsonFile - end
	
	//buildJSONfromXml - start
	public static void buildJSONfromXml(){
		
		File camelOutputDirectory = new File(com.ibm.csi.npm.dvreportmodel.main.DashboardBuilder.camelOutputFolderPath);
		FilenameFilter fileNameFilter = new FilenameFilter() {
			@Override
			public boolean accept(File dir, String name) {
				if (name.lastIndexOf('.') > 0) {
					// get last index for '.' char
					int lastIndex = name.lastIndexOf('.');

					// get extension
					String str = name.substring(lastIndex);

					// match path name extension
					if (str.equals(".xml")) {
						return true;
					}
				}
				return false;
			}
		};
		File[] fileList = null;
		if (camelOutputDirectory.exists()) {
			fileList = camelOutputDirectory.listFiles(fileNameFilter);
		}
		System.out.println("============================================================");
		System.out.println();
		
		System.out.println("Number of files in "+ camelOutputDirectory.getAbsolutePath() + " is " + fileList.length);
		System.out.println();
		System.out.println("============================================================");
		final CountDownLatch countDownLatch = new CountDownLatch(fileList.length);
		
		try {
			//final String fileName = reporterName.replaceAll(" ", "_");
			CamelContext context = new DefaultCamelContext();
			context.addRoutes(new RouteBuilder() {
				public void configure() {

					try {
						DataFormat jaxb = new JaxbDataFormat(JAXBContext
								.newInstance("com.ibm.csi.npm.dashjson"));
						from("file://" + com.ibm.csi.npm.dvreportmodel.main.DashboardBuilder.camelOutputFolderPath)
								.unmarshal(jaxb)
								.marshal()
								.json(JsonLibrary.Gson)
								.to("file://"
										+ com.ibm.csi.npm.dvreportmodel.main.DashboardBuilder.camelOutputFolderPath
										+ "json/?fileName=${file:name.noext}.json")
								.process(new Processor() {
									@Override
									public void process(Exchange exchange)
											throws Exception {

										System.out.println("=======================");
										System.out.println("Json update/created");
										System.out.println("=======================");
											
										countDownLatch.countDown();
										
									}
								});
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			});
			context.start();
			countDownLatch.await();
			context.stop();
		} catch (Exception e) {
			System.out.println("Exception while xml to json transformation" + e.toString());
		}
	}
	//buildJSONfromXml - end
	
	
	private static ArrayList<StoreType> buildStoresFromPanels(String key,JsonArray tempPanels) {
		ArrayList<StoreType> tempStores = new ArrayList<StoreType> ();
		for (JsonElement panel : tempPanels) {
			JsonObject panelObject = (JsonObject) panel;
			JsonArray temptargets = (JsonArray) panelObject.get("targets");
			String title = ((panelObject.get("title")).getAsString().replace(" ", ""));
			String dataSource = (panelObject.get("datasource")).getAsString();
			for (JsonElement target : temptargets) {
				JsonObject targetObject = (JsonObject) target;
				StoreType tempStore = buildStoreFromPanel(key, title, targetObject); // store without datasource;
				tempStore.setDatasource(dataSource);
				tempStores.add(tempStore);
			}
		}
		return tempStores;
	}

	private static StoreType buildStoreFromPanel(String key, String title, JsonObject targetObject) {
		StoreType tempStore = new StoreType();
		tempStore.setName("store"+key+ (targetObject.get("refId")).getAsString() + title );
		tempStore.setQuery((targetObject.get("rawSql")).getAsString());
		return tempStore;
	}

	private static ArrayList<WidgetType> buildWidgetsFromPanels(String key,JsonArray tempPanels) {
		ArrayList<WidgetType> tempWidgets = new ArrayList<WidgetType> ();
		for (JsonElement panel : tempPanels) {
			JsonObject panelObject = (JsonObject) panel;
			WidgetType tempWidget = new WidgetType();
			
			// Set widget id & Title
			tempWidget.setId("grafanaPanel"+key+(String) (panelObject.get("id")).getAsString());
			tempWidget.setTitle((String) (panelObject.get("title")).getAsString());
			
			
			//Set Widget Type
			
			if((panelObject.get("type").getAsString()).equalsIgnoreCase("graph")) {
			if(panelObject.get("bars").getAsBoolean()) {tempWidget.setType("Bar");}
			else if(panelObject.get("lines").getAsBoolean()) {tempWidget.setType("Line");}
			}else {tempWidget.setType("grid");
			}
			
			//set rowspan,colspan,xpos,ypos
			JsonObject gridPos = (JsonObject) panelObject.getAsJsonObject("gridPos");
			tempWidget.setRowspan(gridPos.get("h").getAsString());
			tempWidget.setColspan(gridPos.get("w").getAsString());
			tempWidget.setXpos(gridPos.get("x").getAsString());
			tempWidget.setYpos(gridPos.get("y").getAsString());
			
			
			
			
			tempWidgets.add(tempWidget);
		}
		return tempWidgets;
	}
	
	

} 